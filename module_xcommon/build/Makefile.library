###########################################################
# COMMON MAKEFILE FOR BUILDING XMOS/XCORE LIBRARIES
##########################################################

BASE_DIR ?= .
VERBOSE ?= 0
AUTO_ECLIPSE ?= 0
XCC_C_FLAGS ?= $(XCC_FLAGS)
XCC_CPP_FLAGS ?= $(XCC_FLAGS)
XCC_XC_FLAGS ?= $(XCC_FLAGS)
XCC_ASM_FLAGS ?= $(XCC_FLAGS)
XCC_MAP_FLAGS ?= $(XCC_FLAGS)

ifneq ($(DISABLE_WALL),1) 
XCC_FLAGS += -Wall
endif

EXTRA_C_OPTIONS = -fno-strict-aliasing

# Define some generic OS functions
ifeq ($(OS),WINDOWS)
WINFLAG=1
else
ifeq ($(findstring Windows, $(OS)),Windows)
WINFLAG=1
else
WINFLAG=0
endif
endif

XCOMMON_MAKEFILE = $(filter %Makefile.library,$(MAKEFILE_LIST))

MODULE_XCOMMON_DIR = $(patsubst %/Makefile.library,%,$(XCOMMON_MAKEFILE))/..

ifeq ($(WINFLAG),1)
CP=copy $(subst /,\,$(1))
XCP=xcopy $(subst /,\,$(1))
RM=cmd /c if exist "$(subst /,\,$(1))" del /Q /F "$(subst /,\,$(1))"
RMRF=cmd /c if exist "$(subst /,\,$(1))" RMDIR /S /Q "$(subst /,\,$(1))"
MKDIR=cmd /c if not exist $(subst /,\,$(1)) mkdir $(subst /,\,$(1))
NULL=nul
CAT=type
OS=WINDOWS
SHELL=C:\Windows\system32\cmd.exe
TO_OS=$(subst /,\,$(1))
USE_XDEP=1
XDEP ?= $(call TO_OS, $(MODULE_XCOMMON_DIR)/build/xdep.exe)
AUTO_PROJ ?= $(call TO_OS, $(MODULE_XCOMMON_DIR)/build/auto_proj.exe)
else
CP=cp $(1)
XCP=cp -r $(1)
RM=rm -f $(1)
RMRF=rm -rf $(1)
MKDIR=mkdir -p $(1)
NULL=/dev/null
CAT=cat
OS=UNIX
TO_OS=$(1)
USE_XDEP=0
XDEP ?= wine $(call TO_OS, $(MODULE_XCOMMON_DIR)/build/xdep.exe)
AUTO_PROJ ?= wine $(call TO_OS, $(MODULE_XCOMMON_DIR)/build/auto_proj.exe)
endif


.SUFFIXES:

# General utility function

IS_DIR = $(wildcard $1/*)

KEEP_IF_DIR = $(if $(call IS_DIR,$1),$1,)

SEARCH_DIR := $(BASE_DIR)/../..

MAKEFILE_COMMON = $(filter %module_xmos_common/build/Makefile.common,$(MAKEFILE_LIST))

MAKEFILE_COMMON_DIR = $(patsubst %/build/Makefile.common,%,$(MAKEFILE_COMMON))

MODULE_NAME ?= $(subst .,_,$(notdir $(abspath .)))

ifeq ($(abspath $(MAKEFILE_COMMON_DIR)/..),$(abspath $(BASE_DIR)/..))
SEARCH_DIR := $(BASE_DIR)/..
endif

ifeq ($(abspath $(MAKEFILE_COMMON_DIR)/../..),$(abspath $(BASE_DIR)/..))
SEARCH_DIR := $(BASE_DIR)/..
endif 

include module_build_info

INCLUDE_DIRS := *
SOURCE_DIRS := *
LIB_DIRS := *


GET_ALL_SUBDIRS = $1 $(foreach x,$(filter-out %archive, $(wildcard $1/*)),$(if $(call IS_DIR, $x), $(call GET_ALL_SUBDIRS, $x),))

EXPAND_DIR = $(if $(filter %*,$1), $(call GET_ALL_SUBDIRS,$(subst *,.,$(patsubst %/*,%,$1))),$1)

GET_C_FILES = $(foreach x, $(foreach y,$(1), $(call EXPAND_DIR,$(BASE_DIR)/../$(CURRENT_MODULE)/$y)), $(wildcard $x/*.c))
GET_CPP_FILES = $(foreach x, $(foreach y, $(1), $(call EXPAND_DIR,$(BASE_DIR)/../$(CURRENT_MODULE)/$y)), $(wildcard $x/*.cpp))
GET_XC_FILES = $(foreach x, $(foreach y, $(1), $(call EXPAND_DIR,$(BASE_DIR)/../$(CURRENT_MODULE)/$y)), $(wildcard $x/*.xc))
GET_ASM_FILES = $(foreach x, $(foreach y, $(1), $(call EXPAND_DIR,$(BASE_DIR)/../$(CURRENT_MODULE)/$y)), $(wildcard $x/*.s)) $(foreach x, $(foreach y, $(1), $(call EXPAND_DIR,$(BASE_DIR)/../$(CURRENT_MODULE)/$y)), $(wildcard $x/*.S))
GET_ALL_FILES = $(call GET_C_FILES, $1) $(call GET_XC_FILES, $1) $(call GET_ASM_FILES, $1)


SET_XCC_FLAGS = $(foreach z, $(call GET_ALL_FILES, $1), $(if $(XCC_FLAGS_$(notdir $z)),,$(eval XCC_FLAGS_$(notdir $z) = $2)))
SET_XCC_C_FLAGS = $(foreach z, $(call GET_C_FILES, $1), $(if $(XCC_FLAGS_$(notdir $z)),,$(eval XCC_FLAGS_$(notdir $z) = $2)))
SET_XCC_CPP_FLAGS = $(foreach z, $(call GET_CPP_FILES, $1), $(if $(XCC_FLAGS_$(notdir $z)),,$(eval XCC_FLAGS_$(notdir $z) = $2)))
SET_XCC_XC_FLAGS = $(foreach z, $(call GET_XC_FILES, $1), $(if $(XCC_FLAGS_$(notdir $z)),,$(eval XCC_FLAGS_$(notdir $z) = $2)))
SET_XCC_ASM_FLAGS = $(foreach z, $(call GET_ASM_FILES, $1), $(if $(XCC_FLAGS_$(notdir $z)),,$(eval XCC_FLAGS_$(notdir $z) = $2)))


TO_OBJ = $(patsubst %.cpp,%.o,$(patsubst %.S,%.o,$(patsubst %.xc,%.o, $(patsubst %.c,%.o, $(patsubst %.s,%.o, $(1))))))

ifeq ($(SRC_PREFIX),1)
MY_SRCDIR = $(BASE_DIR)/src
else
MY_SRCDIR = $(BASE_DIR)
endif

SRCDIR = $(MY_SRCDIR)/$1

DIR_EXISTS = $(if $(strip $1),$(strip $(wildcard $1/*)),)

ifeq ($(strip $(LIBRARY)),) 
$(error No LIBRARY specified in application Makefile)
endif

ARCH ?= xs1b

BUILD_NAME := $(ARCH)
WORKING_DIR := .build_$(LIBRARY)
TARGET_DIR = ./$(WORKING_DIR)
FAKE_INC_DIR = $(TARGET_DIR)/fake_inc

BIN_DIR=$(BASE_DIR)/bin/$(BUILD_NAME)
LIB_DIR=$(BASE_DIR)/lib/$(BUILD_NAME)




FULL_INCLUDE_DIRS := $(foreach x, $(INCLUDE_DIRS), $(call EXPAND_DIR,$(call SRCDIR,$x)))
FULL_SOURCE_DIRS := $(foreach x, $(SOURCE_DIRS), $(call EXPAND_DIR,$(call SRCDIR,$x)))
FULL_LIB_DIRS := $(foreach x, $(LIB_DIRS), $(call EXPAND_DIR,$(call SRCDIR,$x)))

FULL_INCLUDE_DIRS := $(filter-out ./export%, $(FULL_INCLUDE_DIRS))
FULL_SOURCE_DIRS := $(filter-out ./export%, $(FULL_INCLUDE_DIRS))

FULL_EXPORT_DIRS := $(foreach x, $(EXPORT_SOURCE_DIRS), $(call EXPAND_DIR,$(call SRCDIR,$x)))


FULL_SOURCE_DIRS := $(if $(LIBRARY), $(filter-out $(FULL_EXPORT_DIRS), $(FULL_SOURCE_DIRS)), $(FULL_SOURCE_DIRS))

LIB_XCC_FLAGS := $(LIB_XCC_FLAGS) $(LIB_XCC_FLAGS_$(LIBRARY))

MODULE_XCC_FLAGS     := $(if $(LIB_XCC_FLAGS),$(LIB_XCC_FLAGS),$(MODULE_XCC_FLAGS))
MODULE_XCC_C_FLAGS   := $(if $(LIB_XCC_C_FLAGS),$(LIB_XCC_C_FLAGS),$(MODULE_XCC_C_FLAGS))
MODULE_XCC_CPP_FLAGS := $(if $(LIB_XCC_CPP_FLAGS),$(LIB_XCC_CPP_FLAGS),$(MODULE_XCC_CPP_FLAGS))
MODULE_XCC_XC_FLAGS  := $(if $(LIB_XCC_XC_FLAGS),$(LIB_XCC_XC_FLAGS),$(MODULE_XCC_XC_FLAGS))
MODULE_XCC_ASM_FLAGS := $(if $(LIB_XCC_ASM_FLAGS),$(LIB_XCC_ASMFLAGS),$(MODULE_XCC_ASM_FLAGS))

$(if $(MODULE_XCC_FLAGS), $(call SET_XCC_FLAGS, $(SOURCE_DIRS), $(MODULE_XCC_FLAGS)),)
$(if $(MODULE_XCC_C_FLAGS), $(call SET_XCC_C_FLAGS, $(SOURCE_DIRS), $(MODULE_XCC_C_FLAGS)),)
$(if $(MODULE_XCC_CPP_FLAGS), $(call SET_XCC_CPP_FLAGS, $(SOURCE_DIRS), $(MODULE_XCC_CPP_FLAGS)),)
$(if $(MODULE_XCC_XC_FLAGS), $(call SET_XCC_XC_FLAGS, $(SOURCE_DIRS), $(MODULE_XCC_XC_FLAGS)),)
$(if $(MODULE_XCC_ASM_FLAGS), $(call SET_XCC_ASM_FLAGS, $(SOURCE_DIRS), $(MODULE_XCC_ASM_FLAGS)),)

QUOTED_INCLUDE_DIRS = $(foreach x, $(FULL_INCLUDE_DIRS),"../$x")

ALL_BIN_SOURCE_FILES = $(foreach x, $(BINARIES), $(SOURCE_FILES_$x))

C_SOURCE_FILES = $(foreach x, $(FULL_SOURCE_DIRS), $(wildcard $x/*.c))
C_OBJ_FILES = $(patsubst %.c, %.o, $(C_SOURCE_FILES))
C_DEP_FILES = $(patsubst %.c, $(TARGET_DIR)/%.d, $(notdir $(C_SOURCE_FILES)))

CPP_SOURCE_FILES = $(foreach x, $(FULL_SOURCE_DIRS), $(wildcard $x/*.cpp))
CPP_OBJ_FILES = $(patsubst %.cpp, %.o, $(CPP_SOURCE_FILES))
CPP_DEP_FILES = $(patsubst %.cpp, $(TARGET_DIR)/%.d, $(notdir $(CPP_SOURCE_FILES)))

XC_SOURCE_FILES = $(foreach x, $(FULL_SOURCE_DIRS), $(wildcard $x/*.xc))
XC_OBJ_FILES = $(patsubst %.xc, %.o, $(XC_SOURCE_FILES))
XC_DEP_FILES = $(patsubst %.xc, $(TARGET_DIR)/%.d, $(notdir $(XC_SOURCE_FILES)))

ASM_SOURCE_FILES = $(foreach x, $(FULL_SOURCE_DIRS), $(wildcard $x/*.s)) $(foreach x, $(FULL_SOURCE_DIRS), $(wildcard $x/*.S))
ASM_OBJ_FILES = $(patsubst %.S, %.o, $(patsubst %.s, %.o, $(ASM_SOURCE_FILES)))
ASM_DEP_FILES = $(patsubst %.S, $(TARGET_DIR)/%.d, $(notdir $(filter %.S,$(ASM_SOURCE_FILES))))

XTA_SOURCE_FILES = $(foreach x, $(FULL_SOURCE_DIRS), $(wildcard $x/*.xta)) 

OBJ_SOURCE_FILES = $(foreach x, $(FULL_SOURCE_DIRS), $(wildcard $x/*.o))

XN_SOURCE_FILES0 = $(foreach x, $(FULL_SOURCE_DIRS), $(wildcard $x/*.xn))
XN_SOURCE_FILES = $(filter %$(TARGET).xn, $(XN_SOURCE_FILES0))


SOURCE_FILES = $(C_SOURCE_FILES) $(CPP_SOURCE_FILES) $(XC_SOURCE_FILES) $(ASM_SOURCE_FILES)

EXCLUDE_FILES_1 = $(EXCLUDE_FILES) $(ALL_BIN_SOURCE_FILES)

EXCLUDE_DEP_FILES = $(patsubst %.S,%(TARGET_DIR)/%.d, $(patsubst %.cpp,$(TARGET_DIR)/%.d,$(patsubst %.xc,$(TARGET_DIR)/%.d, $(patsubst %.c,$(TARGET_DIR)/%.d, $(EXCLUDE_FILES_1)))))

EXCLUDE_OBJ_FILES = $(call TO_OBJ, $(EXCLUDE_FILES_1))

OBJ_FILES0 = $(filter-out $(EXCLUDE_OBJ_FILES), $(notdir $(C_OBJ_FILES) $(XC_OBJ_FILES) $(ASM_OBJ_FILES) $(CPP_OBJ_FILES) $(OBJ_SOURCE_FILES)))
OBJ_FILES = $(foreach x, $(OBJ_FILES0), $(TARGET_DIR)/$x)
DEP_FILES_0 = $(filter-out $(EXCLUDE_DEP_FILES),$(CPP_DEP_FILES) $(C_DEP_FILES) $(XC_DEP_FILES) $(ASM_DEP_FILES))
DEP_FILES = $(patsubst %.d, %.0.d, $(DEP_FILES_0))

HEADER_FILES = $(filter-out $(EXCLUDE_FILES),$(foreach x, $(FULL_INCLUDE_DIRS), $(wildcard $x/*.h)))

NOTDIR_HEADER_FILES = $(foreach x,$(HEADER_FILES),$(notdir $x))

HEADER_DEP_FILES = $(patsubst %.h, %.dh, $(foreach x, $(HEADER_FILES), $(TARGET_DIR)/$(notdir $x)))

HEADER_STATUS_FILES = $(HEADER_DEP_FILES:%.dh=%.hstat)

INCLUDE_FLAGS = $(foreach x,$(QUOTED_INCLUDE_DIRS),-I$x)

OPTIONAL_HEADER_FLAG=$(if $(filter $1,$(NOTDIR_HEADER_FILES)),-D__$(strip $(subst .,_,$1))_exists__=1,)

OPTIONAL_HEADER_FLAGS=$(foreach x,$(OPTIONAL_HEADERS),$(call OPTIONAL_HEADER_FLAG,$x))

VPATH = $(FULL_SOURCE_DIRS) 
VPATH += $(FULL_INCLUDE_DIRS)
VPATH += $(FAKE_INC_DIR)

ifeq ($(USE_XDEP),1)
ifeq ($(WINFLAG),1)
SYS_INCLUDE = $(subst \,/,$(subst ;, ,$(subst Program Files,PROGRA~2,$(subst Program Files (x86),PROGRA~2,$(1))))) $(subst \,/,$(subst ;, ,$(subst Program Files,PROGRA~1,$(subst Program Files (x86),PROGRA~1,$(1)))))
VPATH += $(call SYS_INCLUDE, $(XCC_C_INCLUDE_PATH))
VPATH += $(call SYS_INCLUDE, $(XCC_XC_INCLUDE_PATH))
VPATH += $(call SYS_INCLUDE, $(XCC_ASM_INCLUDE_PATH))
else
SYS_INCLUDE = $(subst :, ,$1)
VPATH += $(call SYS_INCLUDE, $(XCC_C_INCLUDE_PATH))
VPATH += $(call SYS_INCLUDE, $(XCC_XC_INCLUDE_PATH))
VPATH += $(call SYS_INCLUDE, $(XCC_ASM_INCLUDE_PATH))
endif
endif


LIB_FILES = $(foreach x, $(FULL_LIB_DIRS), $(wildcard $x/xs1b/*.a))

LIB_FLAGS = $(foreach x,$(FULL_LIB_DIRS), -L $(call TO_OS, ../$x)) $(foreach x,$(LIB_FILES),-l$(patsubst lib%.a,%,$(notdir $x)))

# Make rules for directories

$(FAKE_INC_DIR)/ : | $(TARGET_DIR)
	@-$(call MKDIR, $(FAKE_INC_DIR)) > $(NULL)

$(TARGET_DIR)/ :
	@-$(call MKDIR, $(TARGET_DIR)) > $(NULL)

$(BIN_DIR)/:
	@-$(call MKDIR,$(BIN_DIR)) > $(NULL)

$(LIB_DIR)/:
	@-$(call MKDIR,$(LIB_DIR)) > $(NULL)

$(BASE_DIR)/bin/: 
	@-$(call MKDIR,$(BASE_DIR)/bin) > $(NULL)

# Make rules for source


# Make rules for objects
XCC = xcc
XAR = xmosar
XOBJDUMP = xobjdump

TARGET_FLAGS = -march=$(ARCH)



define LANG
$(strip $(if $(filter %.c, $1), C, 
  $(if $(filter %.xc, $1), XC,
     $(if $(filter %.cpp, $1), CPP,
	$(if $(filter %.S, $1), ASM,
	   $(if $(filter %.s, $1), ASM, ))))))
endef

define lang_flags
$(if $(XCC_$(call LANG,$1)_FLAGS), $(XCC_$(call LANG,$1)_FLAGS), $(XCC_FLAGS))
endef

define make_flags
$(if $(XCC_FLAGS_$(notdir $1)), $(XCC_FLAGS_$(notdir $1))  $(TARGET_FLAGS), $(call lang_flags, $1) $(TARGET_FLAGS)) 
endef

ifeq ($(WINFLAG),1)
$(HEADER_FILES):
	@rem
else
$(HEADER_FILES):
	@echo -n
endif

ifneq ($(VERBOSE),1)
.SILENT: $(OBJ_FILES) $(BIN_DIR) $(TARGET_DIR) $(FAKE_INC_DIR)
endif

%.h: | $(FAKE_INC_DIR)
	@echo WARNING: Include file $@ missing
	@echo "Missing include file" > $(FAKE_INC_DIR)/$(notdir $@)

$(TARGET_DIR)/%.o : %.xc $(XN_SOURCE_FILES) | $(TARGET_DIR)
	@echo Compiling $(notdir $<)
	cd $(TARGET_DIR) && $(XCC) -c $(OPTIONAL_HEADER_FLAGS) $(INCLUDE_FLAGS) $(call make_flags,$<) ../$< $(addprefix ../, $(XN_SOURCE_FILES)) -o ../$@

$(TARGET_DIR)/%.o :  %.c $(XN_SOURCE_FILES) | $(TARGET_DIR)
	@echo Compiling $(notdir $<)
	cd $(TARGET_DIR) && $(XCC) $(EXTRA_C_OPTIONS) -c $(OPTIONAL_HEADER_FLAGS) $(INCLUDE_FLAGS) $(call make_flags,$<) ../$< $(addprefix ../, $(XN_SOURCE_FILES)) -o ../$@

$(TARGET_DIR)/%.o :  %.cpp $(XN_SOURCE_FILES) | $(TARGET_DIR)
	@echo Compiling $(notdir $<)
	cd $(TARGET_DIR) && $(XCC) -c $(OPTIONAL_HEADER_FLAGS) $(INCLUDE_FLAGS) $(call make_flags,$<) ../$< $(addprefix ../, $(XN_SOURCE_FILES)) -o ../$@

$(TARGET_DIR)/%.o :  %.S $(XN_SOURCE_FILES) | $(TARGET_DIR)
	@echo Compiling $(notdir $<)
	cd $(TARGET_DIR) && $(XCC) -c $(OPTIONAL_HEADER_FLAGS) $(INCLUDE_FLAGS) $(call make_flags,$<) ../$< $(addprefix ../, $(XN_SOURCE_FILES)) -o ../$@

$(TARGET_DIR)/%.o : %.s $(XN_SOURCE_FILES) | $(TARGET_DIR)
	@echo Compiling $(notdir $<)
	cd $(TARGET_DIR) && $(XCC) -c $(INCLUDE_FLAGS) $(call make_flags,$<) ../$< $(addprefix ../, $(XN_SOURCE_FILES)) -o ../$@

.PHONY: eclipse_config


ifeq ($(WINFLAG),0)
ECLIPSE_PROJECTS = $(foreach m,$(USED_MODULES), <project>$(call REMOVE_MODULE_VERSION,$m)<\/project>)
eclipse_config:
	@echo "Updating eclipse config"
	@sed -e 's/<project>.*<\/project>//g' < .project > .tmpproject
	@sed -i -e 's/<projects>/<projects>$(ECLIPSE_PROJECTS)/g' .tmpproject
	@$(call CP,.tmpproject .project)
	@$(call RM,.tmpproject)
else
ECLIPSE_PROJECTS = $(foreach m,$(USED_MODULES), <project>$(call REMOVE_MODULE_VERSION,$m)</project>)
eclipse_config:
	@echo "Updating eclipse config"
	@$(AUTO_PROJ) "$(ECLIPSE_PROJECTS)" < .project > .tmpproject
	@cmd /c more .tmpproject > .project
endif

ifeq ($(AUTO_ECLIPSE),1)
ECLIPSE_CONFIG=eclipse_config
else
ECLIPSE_CONFIG=
endif

ifeq ($(VERBOSE),1)
$(BIN_DIR)/%.xe :  $(OBJ_FILES) $(XN_SOURCE_FILES) $(XTA_SOURCE_FILES) $(LIB_FILES) | $(ECLIPSE_CONFIG) $(BIN_DIR)/ 
	cd $(TARGET_DIR) && $(XCC) $(TARGET_FLAGS) $(XCC_MAP_FLAGS) $(LIB_FLAGS) $(addprefix ../, $(OBJ_FILES)) $(addprefix ../, $(XN_SOURCE_FILES)) $(addprefix ../, $(XTA_SOURCE_FILES)) -o ../$@
else
$(BIN_DIR)/%.xe :  $(OBJ_FILES) $(XN_SOURCE_FILES)  $(XTA_SOURCE_FILES) $(LIB_FILES) | $(ECLIPSE_CONFIG) $(BIN_DIR)/ 
	@echo Creating $(notdir $@)
	@cd $(TARGET_DIR) && $(XCC) $(TARGET_FLAGS) $(XCC_MAP_FLAGS) $(LIB_FLAGS) $(addprefix ../, $(OBJ_FILES)) $(addprefix ../, $(XN_SOURCE_FILES)) $(addprefix ../, $(XTA_SOURCE_FILES))  -o ../$@
endif

ifeq ($(VERBOSE),1)
$(LIB_DIR)/%.a :  $(OBJ_FILES) $(XN_SOURCE_FILES)  |$(LIB_DIR)/ 
	cd $(TARGET_DIR) && $(XAR) cru ../$@ $(addprefix ../, $(OBJ_FILES)) 
else
$(LIB_DIR)/%.a :  $(OBJ_FILES) $(XN_SOURCE_FILES)  |$(LIB_DIR)/ 
	@echo Creating $(notdir $@)
	@cd $(TARGET_DIR) && $(XAR) cru ../$@ $(addprefix ../, $(OBJ_FILES)) 
endif


# Dependency generation

ifeq ($(USE_XDEP),1)

$(TARGET_DIR)/%.hstat: %.h
	@echo hstat > $@

$(TARGET_DIR)/%.d : %.xc | $(TARGET_DIR)/
	@echo Creating dependencies for $(notdir $<)
	@$(XDEP) $(notdir $<) $(TARGET_DIR)/$(call TO_OBJ,$(notdir $<))  < $(call TO_OS,$<) > $(call TO_OS,$@)

$(TARGET_DIR)/%.dh : %.h | $(TARGET_DIR)/
	@echo Creating dependencies for $(notdir $<)
	@$(XDEP) $(notdir $<) $(patsubst %.dh, %.hstat, $@) < $(call TO_OS,$<) > $(call TO_OS,$@)

$(TARGET_DIR)/%.d : %.c | $(TARGET_DIR)/
	@echo Creating dependencies for $(notdir $<)
	@$(XDEP) $(notdir $<) $(TARGET_DIR)/$(call TO_OBJ,$(notdir $<)) < $(call TO_OS,$<) > $(call TO_OS,$@)

$(TARGET_DIR)/%.d : %.cpp | $(TARGET_DIR)/
	@echo Creating dependencies for $(notdir $<)
	@$(XDEP) $(notdir $<) $(TARGET_DIR)/$(call TO_OBJ,$(notdir $<)) < $(call TO_OS,$<) > $(call TO_OS,$@)

$(TARGET_DIR)/%.d : %.S | $(TARGET_DIR)/
	@echo Creating dependencies for $(notdir $<)
	@$(XDEP) $(notdir $<) $(TARGET_DIR)/$(call TO_OBJ,$(notdir $<)) < $(call TO_OS,$<) > $(call TO_OS,$@)

ifneq ($(MAKECMDGOALS),clean)
-include $(DEP_FILES_0)
-include $(HEADER_DEP_FILES)
endif

else

$(TARGET_DIR)/%.d : %.xc | $(TARGET_DIR)/
	@echo Creating dependencies for $(notdir $<)
	@cd $(TARGET_DIR) && $(XCC) -MMD -E $(XCC_FLAGS) $(OPTIONAL_HEADER_FLAGS) $(INCLUDE_FLAGS) ../$< > $(NULL)

$(TARGET_DIR)/%.d : %.c | $(TARGET_DIR)/
	@echo Creating dependencies for $(notdir $<)
	@cd $(TARGET_DIR) && $(XCC) -x xc -MMD -E $(XCC_FLAGS) $(OPTIONAL_HEADER_FLAGS) $(INCLUDE_FLAGS) "$(realpath $<)" > $(NULL)

$(TARGET_DIR)/%.d : %.cpp | $(TARGET_DIR)/
	@echo Creating dependencies for $(notdir $<)
	@cd $(TARGET_DIR) && $(XCC) -x xc -MMD -E $(XCC_FLAGS) $(OPTIONAL_HEADER_FLAGS) $(INCLUDE_FLAGS) "$(realpath $<)" > $(NULL)

$(TARGET_DIR)/%.d : %.S | $(TARGET_DIR)/
	@echo Creating dependencies for $(notdir $<)
	@cd $(TARGET_DIR) && $(XCC) -x xc -MMD -E $(XCC_FLAGS) $(OPTIONAL_HEADER_FLAGS) $(INCLUDE_FLAGS) "$(realpath $<)" > $(NULL)

ifneq ($(MAKECMDGOALS),clean)
 -include $(DEP_FILES_0)
endif

 $(foreach obj,$(OBJ_FILES),$(eval DEP_FILE_$(obj) = $(subst \,,$(shell $(CAT) $(patsubst %.o,%.d,$(obj)) 2> $(NULL) ))))

$(foreach obj,$(OBJ_FILES),$(eval $(patsubst ../$(BASE_DIR)/%,$(BASE_DIR)/%,$(patsubst %.o:,$(TARGET_DIR)/%.o $(obj:.o=.d):,$(DEP_FILE_$(obj))))))

endif

.PRECIOUS: $(OBJ_FILES)
.SECONDARY: $(OBJ_FILES)



# Top level rules

EXPORT_DIR = $(BASE_DIR)/export/$(MODULE_NAME)
EXPORT_LIB_DIR = $(EXPORT_DIR)/lib/$(BUILD_NAME)


clean_common:
	-$(call RMRF,$(LIB_DIR))
	-$(call RMRF,$(TARGET_DIR))
	-$(call RMRF,$(BASE_DIR)/export)

partial_clean:
	-$(call RMRF,$(TARGET_DIR))

clean_fake_includes : | $(FAKE_INC_DIR)/
	@-$(call RMRF,$(FAKE_INC_DIR))

all: clean_fake_includes 

all: $(LIB_DIR)/lib$(LIBRARY).a




$(EXPORT_DIR):
	@echo Creating export directory
	@$(call MKDIR,$(EXPORT_DIR))	

$(EXPORT_LIB_DIR)/lib%.a:
	@$(call MKDIR,$(BASE_DIR)/export/$(MODULE_NAME)/lib/$(BUILD_NAME))	
	@echo Copying library
	@$(call CP,$(LIB_DIR)/lib$*.a $(BASE_DIR)/export/$(MODULE_NAME)/lib/$(BUILD_NAME)/lib$*.a)


%.export:
	@echo Exporting directory: $*
	@$(call XCP, $* $(EXPORT_DIR)/$*)

.PHONY: $(EXPORT_DIR)/module_build_info

$(EXPORT_DIR)/module_build_info:
	@echo Copying module_build_info
	@$(call CP, module_build_info $(EXPORT_DIR)/module_build_info)
	@echo "EXPORTED = 1" >> $(EXPORT_DIR)/module_build_info

LIBRARIES ?= $(LIBRARY)

ifeq ($(LIBRARY),NONE)
else
export: all
endif


do_export: $(EXPORT_DIR) $(foreach lib, $(LIBRARIES), $(EXPORT_LIB_DIR)/lib$(lib).a) $(foreach x, $(EXPORT_SOURCE_DIRS), $x.export) $(EXPORT_DIR)/module_build_info
	@echo Export complete

.PHONY: export

export:
	@$(call RMRF, export)
	@make -f $(XCOMMON_MAKEFILE) do_export

clean: clean_common
